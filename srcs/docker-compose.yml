version: '3.8'

services:
  db:
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} "
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    expose:
      - "5432"
    networks:
      - transcendence

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    # command: tail -f /dev/null
    volumes:
      - ./backend:/app
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - transcendence

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    networks:
      - transcendence
    volumes:
      - ./frontend/app:/app
      - /app/node_modules
    command: npm start

  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./frontend/app/src:/usr/share/nginx/html
      - ./nginx/certs:/usr/share/nginx/certs
    depends_on:
      - backend
      - frontend
      - certs-generator
    networks:
      - transcendence

  certs-generator:
    image: alpine
    volumes:
      - ./nginx/certs:/certs
    command: >
      /bin/sh -c "
      apk add --no-cache openssl &&
      if [ ! -f /certs/nginx.crt ]; then
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /certs/nginx.key -out /certs/nginx.crt -subj '/CN=localhost';
      fi;
      "
networks:
  transcendence:
    driver: bridge

volumes:
  postgres_data:
