version: '3.8'

networks:
  transcendence:
    external: false

volumes:
  postgres_data:
  certs:
  esdata01:
  kibanadata:
  metricbeatdata01:
  filebeatdata01:
  logstashdata01:
  vaultdata:
  vault-secret:
  vault-key:
  vault-cert:
  db-secret:
  api-secret:
  nginx-certs:
  elk-setup-secret:
  elk-es01-secret:
  elk-kibana-secret:
  elk-metricbeat01-secret:
  elk-logstash01-secret:
  elk-filebeat01-secret:

services:
  db:
    container_name: db
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - db-secret:/root/db
      - vault-cert:/vault-cert
      - ./vault/services/db.sh:/root/db.sh:ro,Z
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    entrypoint: sh /root/db.sh
    depends_on:
      vault:
        condition: service_healthy
    expose:
      - "5432"
    networks:
      - transcendence

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - api-secret:/home/user/api
      - vault-cert:/vault-cert
      - ./vault/services/api.sh:/home/user/api.sh:ro,Z
    healthcheck:
      test: [
        "CMD", 
        "curl",
        "http://localhost:8000"
      ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    entrypoint: sh /home/user/api.sh
    depends_on:
      vault:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_started
    expose:
      - "8000"
    networks:
      - transcendence

  redis:
    container_name: redis
    image: redis:alpine
    networks:
      - transcendence

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    expose:
      - "3000"
    networks:
      - transcendence
    volumes:
      - ./frontend/app:/app
      - /app/node_modules
    command: npm start

  nginx:
    container_name: nginx
    build: 
      context: nginx/
      dockerfile: Dockerfile
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./frontend/app/src:/usr/share/nginx/html
      - nginx-certs:/usr/share/nginx/certs
      - ./backend/media:/usr/share/nginx/media
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    networks:
      - transcendence

  certs-generator:
    image: alpine
    volumes:
      - nginx-certs:/certs
      - vault-key:/vault-key
      - vault-cert:/vault-cert
      - ./vault/config/openssl.cnf:/openssl.cnf
    command: >
      /bin/sh -c "
      apk add --no-cache openssl &&
      if [ ! -f /certs/nginx.crt ]; then
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /certs/nginx.key -out /certs/nginx.crt -subj '/CN=localhost';
      fi;
      if [ ! -f /vault-cert/vault.crt ]; then
        openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -keyout /vault-key/vault.key -out /vault-cert/vault.crt -config /openssl.cnf -extensions 'v3_req';
      fi;
      "

  # Elasticsearch + Kibana + Logstash + filebeat  (Secure cert)
  setup:
    build:
      context: ./elk-b/setup
      args:
        ELASTIC_VERSION: ${STACK_VERSION}
    env_file:
      - .env
    volumes:
      - ./elk-b/setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - certs:/usr/share/elasticsearch/config/certs
      - ./elk-b/setup/saved_objects.ndjson:/saved_objects.ndjson:ro,Z
      - elk-setup-secret:/secret/
      - vault-cert:/vault-cert
    user: "0"
    depends_on:
      vault:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - transcendence

  es01:
    container_name: es01
    depends_on:
      vault:
        condition: service_healthy
      setup:
        condition: service_healthy
    build:
      context: ./elk-b/es01
      args:
        STACK_VERSION: ${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
      - elk-es01-secret:/secret
      - vault-cert:/vault-cert
      - ./vault/services/es01.sh:/es01.sh:ro,Z
    ports:
      - ${ES_PORT}:9200
    entrypoint: sh /es01.sh
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - transcendence


  kibana:
    container_name: kibana
    build:
      context: ./elk-b/kibana
      args:
        STACK_VERSION: ${STACK_VERSION}
    depends_on:
      es01:
        condition: service_healthy
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
      - elk-kibana-secret:/secret
      - vault-cert:/vault-cert
      - ./vault/services/kibana.sh:/kibana.sh:ro,Z
    entrypoint: bash /kibana.sh
    ports:
      - ${KIBANA_PORT}:5601
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f --cacert config/certs/kibana/kibana.crt https://localhost:5601"
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - transcendence


  metricbeat01:
    container_name: metricbeat01
    build:
      context: ./elk-b/metricbeat
      args:
        METRICBEAT_VERSION: ${STACK_VERSION}
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    user: root
    volumes:
      - certs:/usr/share/metricbeat/certs
      - metricbeatdata01:/usr/share/metricbeat/data
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
      - vault-cert:/vault-cert
      - elk-metricbeat01-secret:/secret
      - ./vault/services/metricbeat01.sh:/metricbeat01.sh:ro,Z
    networks:
      - transcendence
    entrypoint: bash /metricbeat01.sh

  filebeat01:
    container_name: filebeat01
    build:
      context: ./elk-b/filebeat
      args:
        FILEBEAT_VERSION: ${STACK_VERSION}
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    user: root
    volumes:
      - certs:/usr/share/filebeat/certs
      - filebeatdata01:/usr/share/filebeat/data
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - elk-filebeat01-secret:/secret
      - vault-cert:/vault-cert
      - ./vault/services/filebeat01.sh:/filebeat01.sh:ro,Z
    networks:
      - transcendence
    entrypoint: bash /filebeat01.sh

  logstash01:
    container_name: logstash01
    build:
      context: ./elk-b/logstash
      args:
        STACK_VERSION: ${STACK_VERSION}
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata01:/usr/share/logstash/data
      - ./elk-b/logstash/pipeline:/usr/share/logstash/pipeline
      - ./elk-b/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - elk-logstash01-secret:/secret
      - vault-cert:/vault-cert
      - ./vault/services/logstash01.sh:/logstash01.sh:ro,Z
    networks:
      - transcendence
    entrypoint: bash /logstash01.sh

  vault:
    image: hashicorp/vault:latest
    container_name: vault
    volumes:
      # Vault persistence
      - vaultdata:/vault/file
      - vault-secret:/vault/secrets
      # Vault configuration
      - ./vault/config:/vault/config
      - ./vault/policies:/vault/policies
      - ./vault/tools:/vault/tools
      # Vault entrypoints
      - ./vault/tools/init.sh:/tools/init.sh:ro,Z
      - ./vault/tools/entrypoint.sh:/tools/entrypoint.sh:ro,Z
      - ./vault/tools/wait-certs.sh:/tools/wait-certs.sh:ro,Z
      # Vault certificates
      - vault-key:/vault-key
      - vault-cert:/vault-cert
      # Services tokens
      - db-secret:/vault/secrets/db
      - api-secret:/vault/secrets/api
      - elk-setup-secret:/vault/secrets/elk-setup
      - elk-es01-secret:/vault/secrets/elk-es01
      - elk-kibana-secret:/vault/secrets/elk-kibana
      - elk-metricbeat01-secret:/vault/secrets/elk-metricbeat01
      - elk-logstash01-secret:/vault/secrets/elk-logstash01
      - elk-filebeat01-secret:/vault/secrets/elk-filebeat01
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 20
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_ADDR=https://vault:8200/
      - VAULT_SKIP_VERIFY=true
    # entrypoint: sh /tools/init.sh
    entrypoint: sh /tools/entrypoint.sh
    depends_on:
      - certs-generator
    expose:
      - "8200"
    networks:
      - transcendence
